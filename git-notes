Git has three main states that your files can reside in: committed, modified, and staged:

Committed means that the data is safely stored in your local database.

Modified means that you have changed the file but have not committed it to your database yet.

Staged means that you have marked a modified file in its current version to go into your next commit snapshot.

# Installing git
$ sudo apt install git-all
# Check git version
$ git --version

Git comes with a tool called git config that lets you get and set configuration variables that control all aspects of how Git looks and operates.

# Your Identity
$ git config --global user.name "shahidyousuf"  // settings in /home/user/.gitconfig
$ git config --global user.email shahidyousuf77@gmail.com

$ git config user.name "someusername" // settings in .git/config of git directory i.e local

# Checking Your Settings
$ git config --list
$ git config user.name
$ git config user.email

# Getting help
-- git help <verb>
$ git help config
$ git help merge
$ git help clone
$ git help fetch
$ git help push

$ git config -h
$ git push -h

# Initializing a Repository in an Existing Directory
$ cd /home/user/my_project
$ git init                     # this is now a git repository

# Cloning an existing git repo
$ git clone <repo_url>
# Checking the Status of Your Files
$ git status

# Let’s say you add a new file to your project, a simple README file. If the file didn’t exist before, and you run git status, you see your file listed as untracked file  

# Tracking New Files
$ git add README # for example, now README file will be tracked and staged to be committed

# git add is a multipurpose command — you use it to begin tracking new files, to stage files, and to do other things    like marking merge-conflicted files as resolved

# If you modify a file after you run git add, you have to run git add again to stage the latest version of the file

# To see what you’ve changed but not yet staged, type git diff with no other arguments
# If you want to see what you’ve staged that will go into your next commit, you can use git diff --staged.

# Committing Your Changes
$ git commit
$ git commit -m "add this to file" # for example

# Removing Files
$ git rm somefile
# Keep the file in your working tree but remove it from your staging area.
$ git rm --cached somefile

# Moving Files
# If you want to rename a file in Git:
$ git mv myfile.txt myfile    # essentially renaming myfile.txt to myfile

# Viewing the Commit History
$ git log
$ git log -3 # latest 3 commits
$ git log -p -2 # also shows the difference in latest two commits
$ git log --since=2.weeks # commits made in last two weeks
$ git log --since=4.days  # commits made in last 4 days

# Undoing things
# if you commit and then realize you forgot to stage the changes in a file you wanted to add to this commit, you can do something like this:

$ git commit -m "initial commit"
$ git add forgotten_file
$ git commit --amend

# Unstaging a Staged File
$ git reset HEAD somefile

# Unmodifying a Modified File
$ git checkout -- somefile

# Showing Your Remotes
$ git remote
$ git remote -v

# to get data from your remote projects, you can run:
$ git fetch <remote>
# git fetch origin fetches any new work that has been pushed to that server since you cloned (or last fetched from) it.
$ git fetch origin
# It’s important to note that the git fetch command only downloads the data to your local repository — it doesn’t automatically merge it with any of your work or modify what you’re currently working on. You have to merge it manually into your work when you’re ready.

#  Running git pull generally fetches data from the server you originally cloned from and automatically tries to merge it into the code you’re currently working on.

# Pushing to Your Remotes
>> git push <remote> <branch>
$ git push origin master

# Pulling from the remote branch
>> git pull <remote> <branch>
$ git pull origin mybranch
# Inspecting a Remote
>> git remote show <remote>
$ git remote show origin

# Listing Your Tags
$ git tag

# Git Branching
# Branching means you diverge from the main line of development and continue to do work without messing with that main line.

# Creating a New Branch
$ git branch testing # This creates a new pointer to the same commit you’re currently on.

#  In Git, HEAD is a pointer to the local branch you’re currently on.

# Switching Branches
$ git checkout testing

# To create a new branch and switch to it at the same time:
$ git checkout -b testing

# delete a branch
$ git branch -d testing

# Merging
$ git checkout master
$ git merge testing # merges testing branch to master

#### this line was added from the branch #######



### All important commands ########
$ git --version
$ git config --list
$ git config --global user.name "shahidyousuf"
$ git config --global user.email "shahidyousuf77@gmail.com"
$ git config --global color.ui true
